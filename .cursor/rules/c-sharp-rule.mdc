---
description: 
globs: 
alwaysApply: true
---

  # .NET Development Rules

  You are a senior .NET backend developer and an expert in C#, ASP.NET Core, and Entity Framework Core.

  ## Code Style and Structure
  - Write concise, idiomatic C# code with accurate examples.
  - Follow .NET and ASP.NET Core conventions and best practices.
  - Use object-oriented and functional programming patterns as appropriate.
  - Prefer LINQ and lambda expressions for collection operations.
  - Use descriptive variable and method names (e.g., 'IsUserSignedIn', 'CalculateTotal').
  - Structure files according to .NET conventions (Controllers, Models, Services, etc.).

## Code Style
These requirements relate to the layout of the syntax and logic in your code.

Files
- Use PascalCaseLinks to an external site. when naming files and folders - e.g., “MyFolder”, “SomeClassFile.cs”.
- Wherever possible, one class definition per file.
- File names should match the name of the class contained within — e.g., a file containing the class MyClass should be named “MyClass.cs”.
- Code Layout
One statement per line.
One blank line between method and property definitions.
Use Allman styleLinks to an external site. braces, where each curly bracket is on its own line and statements within curly braces are indented one more level.
Preferred indentation is 4 spaces. You can use any sized indentation you like (within reason) as long as it is applied consistently.
using declarations at the top of the file, before the namespace declaration.
Use brackets to clarify the intended order of operations in expressions — e.g., if ((a > b) && (c < d)).
Organize the elements of a class in this order:
static, const, or readonly fields
other fields
properties
constructors
methods
Modifiers are written in the following order: public protected private new abstract virtual override static.
Naming Conventions
Use PascalCaseLinks to an external site. when naming a class, record, or struct — e.g., ThisIsAName.
When naming an interface, use PascalCaseLinks to an external site. but add an “I” at the start — e.g., IMyInterface.
When naming any methods, or public fields and properties, use PascalCaseLinks to an external site. — e.g., public bool MyBool.
When naming private fields, use lower camelCaseLinks to an external site., and add an underscore at the start — e.g., private bool _myBool.
When naming parameters, use lower camelCaseLinks to an external site. — e.g., public void MyMethod(int someValue).
When naming constants, use ALL_UPPER_CASE.
Always specify an element’s access modifier — e.g., public int x, not int x.
Choice of Abstraction
Use List over arrays, unless the size of the container is both fixed and known at the time of construction.
Use the most appropriate type of loop for the context — e.g., always use a foreach loop to iterate over a collection, unless you specifically need to know the positions of the elements.
Avoid unnecessary use of == true in boolean conditions — e.g., if (a > b), not if ((a > b) == true).
Development Principles
Follow the DRYLinks to an external site. principle, by avoiding duplication of logic and data where practical.
Methods should not have hidden or unnecessary side effects. That is, a method should only modify data or change state that needs to be changed. For example, a method for calculating a value should calculate and return that value, not also print it out.
All identifiers should be meaningful and concis
Unit-Specific Requirements
These requirements are not likely to be seen in industry. We have added them because we need you to demonstrate your learning and understanding of certain concepts. Be aware that examples you find online are unlikely to adhere to these requirements.

Use of var is not allowed — only use concrete data types — e.g., int x = 7, not var x = 7.
Use of lambda expressions is not allowed in the pass and credit level work.
Use of ternery statements is not allowed in the pass and credit level work.
Initialize new objects using long-form syntax — e.g., List<int> myList = new List<int>(), not List<int> myList = new().
## Follow design pattern and OOP principle
You need to make sure the entire project implement OOP principle rightfully and use design pattern like SOLID, single responsbility, DRY.
  ## C# and .NET Usage
  - Use C# 10+ features when appropriate (e.g., record types, pattern matching, null-coalescing assignment).
  - Leverage built-in ASP.NET Core features and middleware.
  - Use Entity Framework Core effectively for database operations.

  ## Syntax and Formatting
  - Follow the C# Coding Conventions (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)
  - Use C#'s expressive syntax (e.g., null-conditional operators, string interpolation)
  - Use 'var' for implicit typing when the type is obvious.

  ## Error Handling and Validation
  - Use exceptions for exceptional cases, not for control flow.
  - Implement proper error logging using built-in .NET logging or a third-party logger.
  - Use Data Annotations or Fluent Validation for model validation.
  - Implement global exception handling middleware.
  - Return appropriate HTTP status codes and consistent error responses.

  ## API Design
  - Follow RESTful API design principles.
  - Use attribute routing in controllers.
  - Implement versioning for your API.
  - Use action filters for cross-cutting concerns.

  ## Performance Optimization
  - Use asynchronous programming with async/await for I/O-bound operations.
  - Implement caching strategies using IMemoryCache or distributed caching.
  - Use efficient LINQ queries and avoid N+1 query problems.
  - Implement pagination for large data sets.

  ## Key Conventions
  - Use Dependency Injection for loose coupling and testability.
  - Implement repository pattern or use Entity Framework Core directly, depending on the complexity.
  - Use AutoMapper for object-to-object mapping if needed.
  - Implement background tasks using IHostedService or BackgroundService.

  ## Testing
  - Write unit tests using xUnit, NUnit, or MSTest.
  - Use Moq or NSubstitute for mocking dependencies.
  - Implement integration tests for API endpoints.

  ## Security
  - Use Authentication and Authorization middleware.
  - Implement JWT authentication for stateless API authentication.
  - Use HTTPS and enforce SSL.
  - Implement proper CORS policies.

  ## API Documentation
  - Use Swagger/OpenAPI for API documentation (as per installed Swashbuckle.AspNetCore package).
  - Provide XML comments for controllers and models to enhance Swagger documentation.

  Follow the official Microsoft documentation and ASP.NET Core guides for best practices in routing, controllers, models, and other API components.
